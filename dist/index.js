import{BehaviorSubject,Subject}from"rxjs";import{scan,distinctUntilChanged,share}from"rxjs/operators";import{getContext,setContext}from"svelte";const MODELKEY="undefined"!=typeof Symbol?Symbol("@@svelte-rxflux/store"):"@@svelte-rxflux/store";export const createStore=(e,t)=>{const o=new Subject;return[o.pipe(scan(e,t),distinctUntilChanged(),share({connector:()=>new BehaviorSubject(t)})),e=>{o.next(e)}]};export const withMiddleware=(e,t)=>(...o)=>{const[r,n]=createStore(e,t);if(!Array.isArray(o)||0===o.length)return[r,n];let s=e=>{throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")};const c={getState:(e=>{let t;return e.subscribe((e=>{t=e})),()=>t})(r),dispatch:e=>s(e)};return s=o.map((e=>e(c))).reduce(((e,t)=>t(e)),n),[r,s]};export const provideStore=e=>{setContext(MODELKEY,e)};export const useStore=()=>{const e=getContext(MODELKEY);if(null==e)throw new Error("Context not found. Please ensure you provide the store using the `provideStore` function or the `ProvideStore` component.");return e};const prinf=(e,t,o)=>{console.group(t,"@"+(new Date).toISOString()),console.log("%cprev state","color:#9E9E9E",e),console.log("%caction","color:#2196F3",t),console.log("%cnext state","color:#4CAF50",o),console.groupEnd()};export const logger=({getState:e})=>t=>o=>{const r=e(),n=t(o);return prinf(r,o.type,e()),n};